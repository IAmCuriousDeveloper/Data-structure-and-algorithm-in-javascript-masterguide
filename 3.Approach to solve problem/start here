In this section i will tell you how i approach to solve problem (most of the time).
These approaches i have learned from my teacher. and i hope i will make them clear for you too

so lets write an objectives
1.Define what an algorithm is
2.Devise a plan to solve algorithms

Que1.what is algorithm?
-> my easy answer-> A set of finite steps to solve a problem.

Almost everything that you do in programming involves some kind of algorithm!
It's the foundation for being a successful problem solving and developer.

Que2.how i improve in problem solving?
->
Devise a plan for solving problems
Master common problem solving patterns

now i'm gonna tell you THESE 5 STEPS WHICH ARE MOST IMPORTANT TO SOLVE PROBLEM.

1.Understand the Problem
2.Explore Concrete Examples
3.Break It Down
4.Solve/Simplify
5.Look Back and Refactor

These above steps are taken from the book "how to solve it" by george polya 

step1.Understand the problem->
1.Can I restate the problem in my own words?
2.What are the inputs that go into the problem?
3.What are the outputs that should come from the solution to the problem?
4.Can the outputs be determined from the inputs? In other words, do I have enough information to solve the problem? (You may not be able to answer this question until you set about solving the problem. That's okay; it's still worth considering the question at this early stage.)
5.How should I label the important pieces of data that are a part of the problem?

now lets take one simple problem and try to solve it step by step.

problem is-> Write a function which takes two numbers and returns their sum.
see the understandsumtwonum.js

step2.Move to Concrete Examples

1.Coming up with examples can help you understand the problem better

2.Examples also  provide sanity checks that your eventual solution works how it should

3.EXPLORE EXAMPLES
Start with Simple Examples.(write 2,3 simple examples)
Progress to More Complex Examples.
Explore Examples with Empty Inputs.
Explore Examples with Invalid Inputs.

lets take an examples
que.Write a function which takes in a string and returns counts of each character in the string.
see bulidconcreteex.js

step3.Break it Down
Explicitly write out the steps you need to take.(you interviewer likes that)

This forces you to think about the code you'll write before you write it, and helps you catch any lingering conceptual issues or misunderstandings before you dive in and have to worry about details (e.g. language syntax) as well.

lets take the same problem and try it out 
que.Write a function which takes in a string and returns counts of each character in the string.

see breakitdown.js

step4.Simplify or Solve it 
Find the core difficulty in what you're trying to do
Temporarily ignore that difficulty
Write a simplified solution
Then incorporate that difficulty back in.

goto solution.js

Step5.Look Back and Refactor

REFACTORING QUESTIONS
Can you check the result?
Can you derive the result differently?
Can you understand it at a glance?
Can you use the result or method for some other problem?
Can you improve the performance of your solution?
Can you think of other ways to refactor?
How have other people solved this problem?

lets go the the refactor.js refactor version of our solution.

That it now lets jump into section 4 Problem solving patterns.

