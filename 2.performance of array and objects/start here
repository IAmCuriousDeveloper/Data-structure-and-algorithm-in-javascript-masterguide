Arrays and objects are the built in data-structures we use in our day to day life. 
in this section our primary focus is to see these datastructures through the eyes of big-oh

objectives
1.Understand how objects and arrays work, through the lens of Big O
2.Explain why adding elements to the beginning of an array is costly
3.Compare and contrast the runtime for arrays and objects, as well as built-in methods

i will not teach you how objects and array works here.so i recommemd you to please check out how these inbuilt datastructures work.

lets start with object 
A short definition from my side about object

object is a lightweight datastructure which holds the unordered key-value pair.

ex-> 
var obj = {
    name:"Prashant",
    lastname:"Rawal",
    job:"web developer",
    currently_Working : true
}

when to use objects 
1.When you don't need order
2.When you need fast access / insertion and removal
3.When you don't need any ordering, objects are an excellent choice!

lets see some of the complexity of operations on objects

1.Insertion -> O(1) coz its unordered
2.Removal -> O(1) coz generally done by keys
3.Searching -> O(n) coz its unorderd its search one by one (key contains the value or not)
4.Access -> O(1) access is done by key so its O(1)

i will make it simple for you.
Think about it like this -> keys are the address and values are the people living in that address. 
let take a case of searching which is O(n) since its an unorderd key value pair we have to go one by one searching address(key) for a specific person(value) which takes O(n). if we had an address it will be simple O(1).

i hope this make sense to you.

now lets see some of the Objects properties

Object.keys -   O(N) it returns an array of all the keys 

Object.values -   O(N) it returns the array of values 

Object.entries -   O(N) it returns an array of key:value pair 

hasOwnProperty -   O(1) returns true /false that the property exist or not.

ex_> Obj.hasOwnProperty("currently_Working") -> true

======================================================================

Now lets move our focus on arrays 

Arrays are the ordered list 
ex-> 
var arr = ["Prashant",true,1,{}];
a typical example of array which contains string boolean number and an object 

when to use array
1.When you need order
2.When you need fast access / insertion and removal

lets see complexity
insertion - it depends where to insert 
removal - it depends from where to remove
searching - O(N) 
access - O(1) //coz we know the index

arr - > Prashant   true    1         {}
  index    0         1     2         3


1.push -   O(1)
2.pop -   O(1)
3.shift -   O(N)
4.unshift -   O(N)
5.concat -   O(N)
6.slice -   O(N)
7.splice -   O(N)
8.sort -   O(N * log N)
9.forEach/map/filter/reduce/etc. -   O(N)

push and pop happens at the end so it takes O(1).
while shift and unshift are taken place at the front of the array which means we have to maintain the index so O(n).

you can read more about concat slice splice on mdn
here is the link -> https://developer.mozilla.org/en-US/search?q=array+methods&topic=apps&topic=html&topic=css&topic=js&topic=api&topic=canvas&topic=svg&topic=webgl&topic=mobile&topic=webdev&topic=http&topic=webext&topic=standards

concat is for join two array 
slice is for remove some section/elements from the array
splice is for remove/add some elements in between the array

we will see about sorting in the mean time when we discuss about sorting .

Inserting at the beginning is not as easy as we might think! There are more efficient data structures for that!